{"/home/travis/build/npmtest/node-npmtest-how2/test.js":"/* istanbul instrument in package npmtest_how2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-how2/lib.npmtest_how2.js":"/* istanbul instrument in package npmtest_how2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_how2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_how2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-how2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-how2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_how2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_how2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_how2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_how2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_how2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_how2.__dirname + '/lib.npmtest_how2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/how2.js":"var _ = require('lodash');\nvar stackexchange = require('./stackexchange/lib/stackexchange');\nvar google = require('google');\nvar assert = require('assert');\nvar spinner = require('simple-spinner');\nvar spinnerOptions = { doNotBlock: true };\n\nvar ui = require('./ui');\nvar utils = require('./utils');\nvar log = require('./log');\n\nvar options = { version: 2.2 };\nvar context = new stackexchange(options);\n\nfunction selectedGoogleItemCallback(links, callback) {\n    return function(index) {\n        if(links.length === 0) {\n            log.error('Sorry, I cannot find any reasonable answer for your query.');\n            process.exit(1);\n        }\n        var selectedLink = links[index];\n        var parsedLink = utils.parseStackoverflowQuestionId(selectedLink.link);\n        fetchQuestionAnswers(parsedLink, callback);\n    };\n}\n\nfunction fetchQuestionAnswers(parsedLink, callback) {\n    assert(parsedLink);\n    var questionCriteria = {\n        filter: '!-*f(6s6U8Q9b'  // body_markdown and link\n    };\n    questionCriteria.site = parsedLink.site;\n    context.questions.answers(questionCriteria, function(err, results){\n        if(err) {\n            ui.stop();\n            log.error('Cannot fetch answers from Stackoverflow.');\n            log.error(err);\n            process.exit(1);\n        }\n        if(results.error_id) {\n            ui.stop();\n            console.error(results);\n            process.exit(1);\n        }\n\n        var answers = _.sortBy(results.items, function(answer) {\n            return - answer.score;\n        });\n\n        callback(answers);\n\n    }, [parsedLink.questionId]);\n}\n\nfunction googleError(err, links) {\n    ui.stop();\n    var msg = err.toString();\n\n    if(msg.indexOf('have detected unusual traffic') !== -1) {\n        log.error(\n            'You are doing too many requests to Google. ' +\n            'You need to wait a bit before trying again.');\n    }\n    else if(msg.indexOf('ENOTFOUND') !== -1) {\n        log.error('Cannot connect to Google. Make sure you are connected.');\n        log.error(err);\n    }\n    else {\n        log.error('Cannot connect to Google.');\n        log.error(err);\n    }\n    process.exit(1);\n}\n\nfunction searchGoogle(text, lang, callback) {\n    google.resultsPerPage = 40;\n\n    var site;\n    if(lang) {\n        site = 'site:stackoverflow.com ' + lang;\n    }\n    else {\n        site = 'site:unix.stackexchange.com';\n    }\n    var searchQuery = site + ' ' + text;\n\n    google(searchQuery, function (err, next, links){\n        if(err) {\n            return googleError(err, links);\n        }\n\n        links = links.filter(function(link) {\n            return link.title !== '';\n        })\n        .filter(utils.isValidGoogleLink);\n\n        var strippedTitles = links.map(function(link) {\n            var title = utils.stripStackOverflow(link.title);\n            return title;\n        });\n\n        callback(links, strippedTitles);\n\n    });\n}\n\nfunction search(text, lang, callback) {\n    return searchGoogle(text, lang, callback);\n}\n\nfunction main(text, lang, remember) {\n    ui.start();\n    spinner.start(spinnerOptions);\n\n    function afterSearch(links, titles){\n        spinner.stop();\n        ui.showGoogleList(links, titles, selectedGoogleItemCallback(links, function(answers) {\n            ui.showAnswers(answers, function(index) {\n                var selected = answers[index];\n                if (selected) {\n                    ui.showAnswer(selected);\n                }\n            });\n        }));\n    }\n\n    if(!remember) {\n        search(text, lang, afterSearch);\n    }\n    else {\n        afterSearch(remember.links, remember.titles);\n    }\n}\n\nfunction magic(text, lang) {\n    var colors = require('colors/safe');\n\n    function selectedAnswer(titles, answers, index, remember) {\n        if(answers.length === 0) {\n            log.error('Cannot find any reasonable answer for your query.');\n            if(!lang) {\n                console.log('To get the best answers, make sure you specify the language with '+ colors.blue('-l:'));\n                console.log('example: $ how2 '+colors.blue('-l python') +' permutations list');\n                console.log('example: $ how2 '+colors.blue('-l ruby') + ' permutations list');\n            }\n            process.exit(1);\n        }\n\n        var markdown = utils.toEscapedMarkdown(answers[index].body_markdown);\n\n        var title = titles[index];\n        console.log(colors.underline.green(title+'\\n'));\n        console.log(markdown);\n\n        console.log('Press SPACE for more choices, any other key to quit.');\n        require('keypress')(process.stdin);\n        process.stdin.setRawMode(true);\n        process.stdin.on('keypress', onKeypress);\n\n        function onKeypress(ch, key) {\n            if(key) {\n                if(key.name === 'space') {\n                    process.stdin.removeListener('keypress', onKeypress);\n                    return main(text, lang, remember);\n                }\n                else {\n                    process.exit(0);\n                }\n            }\n        }\n    }\n\n    search(text, lang, function(links, titles) {\n        var selectItem = selectedGoogleItemCallback(links, function(answers){\n            spinner.stop();\n            var remember = { links: links, titles: titles };\n            selectedAnswer(titles, answers, 0, remember);\n        });\n        selectItem(0);\n    });\n    spinner.start(spinnerOptions);\n}\n\nmodule.exports = {\n    main: main,\n    search: search,\n    magic: magic\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/stackexchange.js":"'use strict';\n\nvar config = require('./config')\n    , search = require('./methods/search')\n    , questions = require('./methods/questions')\n    , answers = require('./methods/answers')\n    , users = require('./methods/users')\n    , tags = require('./methods/tags');\n\n/**\n * Initialize StackExchange API.\n *\n * @Constructor\n * @param {Object} options\n * @api public\n */\nmodule.exports = function StackExchange(options) {\n    // Mitigate options to config.\n    this.config = config;\n    Object.keys(options || {}).forEach(function setConfig(key) {\n        config.set(key, options[key]);\n    });\n\n    // Expose methods.\n    this.search = search;\n    this.questions = questions;\n    this.answers = answers;\n    this.users = users;\n    this.tags = tags;\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/config.js":"'use strict';\n\nvar nconf = require('nconf');\n\n// Default configuration.\nnconf.use('memory').defaults({\n    api: 'api.stackexchange.com'\n  , protocol: 'https:'\n  , site: 'stackoverflow'\n  , version: 2.2\n});\n\n// Expose config\nmodule.exports = nconf;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/methods/search.js":"'use strict';\n\n/**\n * Required modules.\n */\nvar query = require('../query');\n\n/**\n * Searches a site for any questions which fit the given criteria.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction search (criteria, callback) {\n  query('search', criteria, callback);\n}\n\n/**\n * Extension of search, allows more criteria.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction advanced (criteria, callback) {\n  query('search/advanced', criteria, callback);\n}\n\n// Expose commands.\nmodule.exports.search = search;\nmodule.exports.advanced = advanced;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/query.js":"'use strict';\n\nvar config = require('./config')\n  , parser = require('./parser')\n  , request = require('request')\n  , url = require('url')\n  , Logger = require('devnull')\n  , log = new Logger({ timestamp: false });\n\n/**\n * Execute a query after checkign if criteria are available.\n *\n * @param {String} destination query method\n * @param {Object} criteria parameters to query against\n * @param {Function} callback return results\n * @api private\n */\nmodule.exports = function query (destination, criteria, callback) {\n  if (!callback) return log.critical('No callback supplied for: ' +  destination);\n\n  // Query against the predefined website and construct the endpoint.\n  //criteria.site = config.get('site');\n  var endpoint = url.format({\n      protocol: config.get('protocol')\n    , host: config.get('api')\n    , pathname: '/' + config.get('version') + '/' + destination\n    , query: criteria\n  });\n\n  // Execute the request on proper response call callback.\n  request(\n      { url: endpoint, encoding: null }\n    , function response (error, res) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t}\n        else {\n\t\t\tparser.parseBody.call(this, res.body, callback);\n\t\t}\n      }\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/parser.js":"var zlib = require('zlib');\n\n/**\n * Parse the buffer, StackExchange promises to always deliver zipped content,\n * but since JSON parsing is required just wrap it in a try/catch.\n *\n * @param {Buffer} buffer response content\n * @param {Function} callback return results\n * @api private\n */\nfunction parseBody (buffer, callback) {\n  zlib.unzip(buffer, function Unzipped (error, body) {\n    try {\n      callback(error, JSON.parse(body.toString()));\n    } catch (error) {\n      callback(error);\n    }\n  });\n}\n\n// Export functions\nmodule.exports.parseBody = parseBody;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/methods/questions.js":"'use strict';\n\n/**\n * Required modules.\n */\nvar query = require('../query')\n  , post = require('../post')\n  , Logger = require('devnull')\n  , log = new Logger({ timestamp: false });\n\n\n/**\n * Gets all the questions on the site or returns the questions identified in [ids].\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} ids collection of IDs\n * @api public\n */\nfunction questions (criteria, callback, ids) {\n  ids = ids || [];\n  query('questions/' + ids.join(';'), criteria, callback);\n}\n\n/**\n * Gets the answers to a set of questions identified in [ids].\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} ids collection of IDs\n * @api public\n */\nfunction answers (criteria, callback, ids) {\n  if (!ids || !ids.length) return log.error('questions.answers lacks IDs to query');\n  query('questions/' + ids.join(';') + '/answers', criteria, callback);\n}\n\n/**\n * upvote - Casts an upvote on the selected question\n *\n * @param  {Object} criteria contains server key and valid access_token\n * @param  {Integer} id       ID of a question\n * @param  {Function} callback return results\n * @param  {Boolean} undo     Undo the upvote cast\n * @api public\n */\nfunction upvote(criteria, id, callback, undo) {\n  // Key and Access Token are needed in criteria\n  if(!criteria['key'] || !criteria['access_token']) {\n    return log.error('questions.upvote lacks key and/or access token as criteria');\n  }\n  undo = undo? \"/undo\" : \"\";\n  post('questions/' + id.toString() + '/upvote' + undo, criteria, callback);\n}\n\n/**\n * downvote - Casts a downvote on the selected question\n *\n * @param  {Object} criteria contains server key and valid access_token\n * @param  {Integer} id       ID of a question\n * @param  {Function} callback return results\n * @param  {Boolean} undo     Undo the downvote cast\n * @api public\n */\nfunction downvote(criteria, id, callback, undo) {\n  // Key and Access Token are needed in criteria\n  if(!criteria['key'] || !criteria['access_token']) {\n    return log.error('questions.upvote lacks key and/or access token as criteria');\n  }\n  undo = undo? \"/undo\" : \"\";\n  post('questions/' + id.toString() + '/downvote' + undo, criteria, callback);\n}\n\n// Expose commands.\nmodule.exports.questions = questions;\nmodule.exports.answers = answers;\nmodule.exports.upvote = upvote;\nmodule.exports.downvote = downvote;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/post.js":"'use strict';\n\nvar config = require('./config')\n  , parser = require('./parser')\n  , request = require('request')\n  , url = require('url')\n  , Logger = require('devnull')\n  , log = new Logger({ timestamp: false });\n\n\n/**\n * Post a query with supplied data.\n *\n * @param {String} destination query method\n * @param {Object} data parameters to send as a POST form\n * @param {Function} callback return results\n * @api private\n */\nmodule.exports = function post (destination, data, callback) {\n  if (!callback) return log.critical('No callback supplied for: ' +  destination);\n\n  // Query against the predefined website and construct the endpoint.\n  data.site = config.get('site');\n  var endpoint = url.format({\n      protocol: config.get('protocol')\n    , host: config.get('api')\n    , pathname: '/' + config.get('version') + '/' + destination\n  });\n\n  // Make a post request on proper response call callback.\n  request(\n      { url: endpoint, encoding: null, method: \"POST\", form: data }\n    , function response (error, res) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t}\n        else {\n\t\t\tparser.parseBody.call(this, res.body, callback);\n\t\t}\n      }\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/methods/answers.js":"'use strict';\n\n/**\n * Required modules.\n */\nvar query = require('../query')\n  , post = require('../post')\n  , Logger = require('devnull')\n  , log = new Logger({ timestamp: false });\n\n\n/**\n * Gets all the answers on the site or returns the answers identified in [ids].\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} ids collection of IDs\n * @api public\n */\nfunction answers (criteria, callback, ids) {\n  ids = ids || [];\n  query('answers/' + ids.join(';'), criteria, callback);\n}\n\n/**\n * upvote - Casts an upvote on the selected answer\n *\n * @param  {Object} criteria contains server key and valid access_token\n * @param  {Integer} id       ID of a question\n * @param  {Function} callback return results\n * @param  {Boolean} undo     Undo the upvote cast\n * @api public\n */\nfunction upvote(criteria, id, callback, undo) {\n  // Key and Access Token are needed in criteria\n  if(!criteria['key'] || !criteria['access_token']) {\n    return log.error('answers.upvote lacks key and/or access token as criteria');\n  }\n  undo = undo? \"/undo\" : \"\";\n  post('answers/' + id.toString() + '/upvote' + undo, criteria, callback);\n}\n\n/**\n * downvote - Casts a downvote on the selected answer\n *\n * @param  {Object} criteria contains server key and valid access_token\n * @param  {Integer} id       ID of a question\n * @param  {Function} callback return results\n * @param  {Boolean} undo     Undo the downvote cast\n * @api public\n */\nfunction downvote(criteria, id, callback, undo) {\n  // Key and Access Token are needed in criteria\n  if(!criteria['key'] || !criteria['access_token']) {\n    return log.error('answers.upvote lacks key and/or access token as criteria');\n  }\n  undo = undo? \"/undo\" : \"\";\n  post('answers/' + id.toString() + '/downvote' + undo, criteria, callback);\n}\n\n\n// Expose commands.\nmodule.exports.answers = answers;\nmodule.exports.upvote = upvote;\nmodule.exports.downvote = downvote;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/methods/users.js":"'use strict';\n\n/**\n * Required modules.\n */\nvar query = require('../query')\n  , Logger = require('devnull')\n  , log = new Logger({ timestamp: false });\n\n/**\n * Gets the answers to a set of users identified in [ids].\n *\n * @param {Object} criteria\n * @param {Array} ids collection of IDs\n * @param {Function} callback return results\n * @api public\n */\nfunction answers (criteria, ids, callback) {\n  if (!ids || !ids.length) return log.error('users.answers lacks IDs to query');\n  query('users/' + ids.join(';') + '/answers', criteria, callback);\n}\n\n// Expose commands.\nmodule.exports.answers = answers;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/stackexchange/lib/methods/tags.js":"'use strict';\n\n/**\n * Required modules.\n */\nvar query = require('../query');\n\nfunction tagsValidator(tags) {\n  return function() {\n    if (!tags || !tags.length) {\n      return 'tags is required';\n    }\n    return false;\n  }\n}\n\nvar sortPattern1 = /^popular$|^activity$|^name$/;\nfunction sortValidator1(sort) {\n  return function() {\n    if (!sort) {\n      return 'sort is required';\n    }\n    if (!sort.match(sortPattern1)) {\n      return 'sort is invalid. [popular|activity|name]';\n    }\n    return false;\n  }\n}\nvar sortPattern2 = /^creation$|^applied$|^activity$/;\nfunction sortValidator2(sort) {\n  return function() {\n    if (!sort) {\n      return 'sort is required';\n    }\n    if (!sort.match(sortPattern2)) {\n      return 'sort is invalid. [creation|applied|activity]';\n    }\n    return false;\n  }\n}\n\nvar periodPattern = /^all_time$|^month$/;\nfunction periodValidator(period) {\n  return function() {\n    if (!period) {\n      return 'period is required';\n    }\n    if (!period.match(periodPattern)) {\n      return 'sort is invalid. [all_time|month]';\n    }\n    return false;\n  }\n}\n\nfunction validate(validators) {\n  var errors = [];\n  validators = validators || [];\n  if (!(validators instanceof Array)) {\n    validators = [validators];\n  }\n  validators.forEach(function(validator) {\n    var err = validator();\n    if (err) {\n      errors.push(err);\n    }\n  });\n  if (errors.length === 0) {\n    return false;\n  }\n  return errors;\n}\n\n/**\n * Get the tags on the site.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction tags (criteria, callback) {\n  query('tags', criteria, callback);\n}\n\n/**\n * Get tags on the site by their names.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @api public\n */\nfunction info (criteria, callback, tags) {\n  var errors = validate([tagsValidator(tags), sortValidator1(criteria.sort)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/info', criteria, callback);\n}\n\n/**\n * Get the tags on the site that only moderators can use.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction moderatorOnly (criteria, callback) {\n  var errors = validate([sortValidator1(criteria.sort)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/moderator-only', criteria, callback);\n}\n\n/**\n * Get the tags on the site that fulfill required tag constraints.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction required (criteria, callback) {\n  var errors = validate([sortValidator1(criteria.sort)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/required', criteria, callback);\n}\n\n/**\n * Get all the tag synonyms on the site.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @api public\n */\nfunction synonyms (criteria, callback) {\n  var errors = validate([sortValidator2(criteria.sort)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/synonyms', criteria, callback);\n}\n\n/**\n * Get frequently asked questions in a set of tags.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @api public\n */\nfunction faq (criteria, callback, tags) {\n  var errors = validate(tagsValidator(tags));\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/faq', criteria, callback);\n}\n\n/**\n * Get related tags, based on common tag pairings.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @api public\n */\nfunction related (criteria, callback, tags) {\n  var errors = validate(tagsValidator(tags));\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/related', criteria, callback);\n}\n\n/**\n * Get the synonyms for a specific set of tags.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @api public\n */\nfunction tagsSynonyms (criteria, callback, tags) {\n  var errors = validate([tagsValidator(tags), sortValidator2(criteria.sort)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/synonyms', criteria, callback);\n}\n\n/**\n * Get the top answer posters in a specific tag, either in the last month or for all time.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @param {String} all_time or month\n * @api public\n */\nfunction topAnswerers (criteria, callback, tags, period) {\n  period = period || 'all_time';\n  var errors = validate([tagsValidator(tags), periodValidator(period)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/top-answerers/' + period,\n        criteria, callback);\n}\n\n/**\n * Get the top question askers in a specific tag, either in the last month or for all time.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @param {String} all_time or month\n * @api public\n */\nfunction topAskers (criteria, callback, tags, period) {\n  period = period || 'all_time';\n  var errors = validate([tagsValidator(tags), periodValidator(period)]);\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/top-askers/' + period,\n        criteria, callback);\n}\n\n/**\n * Get the wiki entries for a set of tags.\n *\n * @param {Object} criteria\n * @param {Function} callback return results\n * @param {Array} tags collection of Tag\n * @api public\n */\nfunction wiki (criteria, callback, tags) {\n  var errors = validate(tagsValidator(tags));\n  if (errors) {\n    callback(new Error(errors.join(', ')));\n    return;\n  }\n  query('tags/' + tags.join(';') + '/wikis', criteria, callback);\n}\n\n\n// Expose commands.\nmodule.exports.tags = tags;\nmodule.exports.info = info;\nmodule.exports.moderatorOnly = moderatorOnly;\nmodule.exports.required = required;\nmodule.exports.synonyms = synonyms;\nmodule.exports.faq = faq;\nmodule.exports.related = related;\nmodule.exports.tagsSynonyms = tagsSynonyms;\nmodule.exports.topAnswerers = topAnswerers;\nmodule.exports.topAskers = topAskers;\nmodule.exports.wiki = wiki;\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/ui.js":"var _ = require('lodash');\nvar blessed = require('blessed');\nvar htmlentities = require('ent');\nvar colors = require('colors');\n\nvar utils = require('./utils');\nvar updates = require('./updates');\n\nvar screen;\nvar googleList;\nvar answersList;\nvar logBox;\n\nfunction exit() {\n    screen.destroy();\n    var msg = updates.getResult();\n    if(msg) {\n        console.error(msg);\n    }\n    process.exit(0);\n}\n\nfunction start() {\n    updates.checkForUpdates();\n\n    screen = blessed.screen({\n        smartCSR: true,\n        autoPadding: true\n    });\n\n    screen.key(['C-c'], function(ch, key) {\n        exit();\n    });\n\n    var logText =\n        colors.bgBlue.white.bold(' Enter/Space ')+' open link '+\n        colors.bgBlue.white.bold(' B ') + ' open browser '+\n        colors.bgBlue.white.bold(' Esc ') + ' close window';\n    logBox = blessed.box({\n        width: '100%',\n        top: '100%-1',\n        content: logText\n    });\n    screen.append(logBox);\n    screen.render();\n}\n\nfunction listStyle() {\n    return {\n        selectedBg: 'blue',\n        selectedFg: 'white',\n        // mouse: true,\n        keys: true,\n        vi: true\n    };\n}\n\nfunction showGoogling() {\n    var box = blessed.box({\n        content: 'Googling...'\n    });\n    screen.append(box);\n    screen.render();\n}\n\nfunction showGoogleList(links, titles, callback) {\n    var options = {\n        parent: screen,\n        width: '100%',\n        height: '100%-1',\n        top: 'center',\n        left: 'center',\n        padding: 1,\n        title: 'Select Answer:',\n        // mouse: true\n    };\n    _.extend(options, listStyle());\n    googleList = blessed.list(options);\n\n    googleList.setItems(titles);\n\n    googleList.prepend(new blessed.Text({\n        content: 'Select one code tip:'\n    }));\n\n    googleList.on('select', function(event) {\n        callback(this.selected);\n    });\n\n    googleList.key(['space', 'o'], function() {\n        googleList.enterSelected();\n        screen.render();\n    });\n\n    googleList.key(['escape', 'q'], function() {\n        exit();\n    });\n\n    googleList.key(['b'], function() {\n        var link = links[this.selected];\n        try {\n            require('openurl').open(link.link);\n        }\n        catch(e) {}\n    });\n\n    googleList.select(0);\n    googleList.focus();\n    screen.render();\n}\n\nfunction makeTitleForAnswer(answer) {\n    var withColors = utils.marked(answer.body_markdown);\n\n    var lines = withColors.split('\\n');\n\n    var firstLine;\n    for(var i=0; i < lines.length; i++) {\n        firstLine = lines[i];\n        if(firstLine !== '') break;\n    }\n    firstLine = htmlentities.decode(firstLine);\n    var score = '('+answer.score+') ';\n    return score + firstLine;\n}\n\nfunction showAnswers(answers, callback) {\n    var listBox = blessed.box({\n        top: 'center',\n        left: 'center',\n        width: '90%',\n        height: '90%',\n        border: {\n            type: 'line',\n        },\n        tags: true,\n    });\n\n    var listOptions = {\n        parent: listBox,\n        border: {\n            type: 'bg',\n        },\n    };\n    _.extend(listOptions, listStyle());\n    answersList = blessed.list(listOptions);\n\n    answersList.setItems(answers.map(makeTitleForAnswer));\n\n    answersList.on('select', function() {\n        callback(this.selected);\n    });\n\n    answersList.key(['space', 'o'], function() {\n        answersList.enterSelected();\n        screen.render();\n    });\n\n    answersList.key(['b'], function(event) {\n        var answer = answers[this.selected];\n        require('openurl').open(answer.link);\n    });\n\n    answersList.key(['escape', 'q'], function() {\n        screen.remove(listBox);\n        googleList.focus();\n        screen.render();\n    });\n\n    listBox.append(answersList);\n    answersList.focus();\n    screen.append(listBox);\n    screen.render();\n}\n\nfunction showAnswer(answer) {\n    var text = utils.toEscapedMarkdown(answer.body_markdown);\n\n    var answerBox = blessed.box({\n        top: 'center',\n        left: 'center',\n        width: '80%',\n        height: '80%',\n        border: {\n            type: 'line',\n        },\n        padding : 1,\n        scrollable: true,\n        alwaysScroll: true,\n        scrollbar: {\n            border: {\n                bg: 'yellow'\n            },\n            bg: 'yellow'\n        },\n        keys: true,\n        vi: true,\n        // mouse: true\n    });\n\n    answerBox.setContent(text);\n\n    answerBox.key(['escape', 'q'], function() {\n        screen.remove(answerBox);\n        answersList.focus();\n        screen.render();\n    });\n\n    screen.append(answerBox);\n    answerBox.focus();\n    screen.render();\n}\n\nfunction magicSelect(rows) {\n    screen = blessed.screen({\n        autoPadding: true\n    });\n    var list = blessed.list({\n    });\n    list.setItems(rows);\n    screen.append(list);\n    screen.render();\n}\n\nmodule.exports = {\n    start: start,\n    stop: function() {\n        if(screen) {\n            screen.destroy();\n        }\n    },\n    showGoogling: showGoogling,\n    showGoogleList: showGoogleList,\n    showAnswers: showAnswers,\n    showAnswer: showAnswer,\n    magicSelect: magicSelect\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/utils.js":"var _ = require('lodash');\nvar htmlentities = require('ent');\nvar marked = require('marked');\nvar TerminalRenderer = require('marked-terminal');\n\nmarked.setOptions({\n    // Define custom renderer\n    renderer: new TerminalRenderer({\n        unescape: true,\n    })\n});\n\nfunction stripStackOverflow(title) {\n    var split = title.split(' - ');\n    if(split.length === 3) {\n        split.pop();\n        return split.join(' - ');\n    }\n    if(split.length === 2) {\n        var last = _.last(split);\n        if(last.indexOf('Stack') !== -1 || last.indexOf('Unix') !== -1) {\n            split.pop();\n            return split.join('-');\n        }\n    }\n    return title;\n}\n\nfunction parseStackoverflowQuestionId(link) {\n    var re,\n        matches;\n    if(link.indexOf('stackoverflow.com') !== -1) {\n        re = /.*stackoverflow.com\\/questions\\/(\\d+)\\//;\n        matches = re.exec(link);\n        if(!matches || matches.length < 2) return null;\n        if(matches) {\n            return {\n                site: 'stackoverflow',\n                questionId: matches[1]\n            };\n        }\n    }\n    else if(link.indexOf('stackexchange.com') !== -1) {\n        re = /.*\\/\\/(.*).stackexchange.com\\/questions\\/(\\d+)\\//;\n        matches = re.exec(link);\n        if(!matches || matches.length < 3) return null;\n        return {\n            site: matches[1],\n            questionId: matches[2]\n        };\n    }\n    else return null;\n}\n\nfunction isValidGoogleLink(link) {\n    return parseStackoverflowQuestionId(link.link) !== null;\n}\n\nfunction toEscapedMarkdown(markdown) {\n     return htmlentities.decode(marked(markdown));\n}\n\nmodule.exports = {\n    parseStackoverflowQuestionId: parseStackoverflowQuestionId,\n    stripStackOverflow: stripStackOverflow,\n    isValidGoogleLink: isValidGoogleLink,\n    toEscapedMarkdown: toEscapedMarkdown,\n    marked: marked\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/updates.js":"\nvar checkResult = null;\n\nfunction checkForUpdates() {\n    var npmLatest = require('npm-latest');\n    var package = require('../package.json');\n    var colors = require('colors');\n    var semver = require('semver');\n\n    npmLatest('how2', { timeout: 1500 }, function (err, npm) {\n        if(err) {\n            console.error(err);\n            return;\n        }\n        if(semver.gt(npm.version, package.version)) {\n            checkResult = colors.yellow(\n                '\\nA new version of how2 is available: '+npm.version+'\\n'+\n                'Run '+colors.blue('npm update -g how2')+' to update.\\n'\n            );\n        }\n    });\n}\n\nfunction getResult() {\n    return checkResult;\n}\n\nmodule.exports = {\n    checkForUpdates: checkForUpdates,\n    getResult: getResult\n};\n","/home/travis/build/npmtest/node-npmtest-how2/node_modules/how2/lib/log.js":"var colors = require('colors');\n\nfunction error(str) {\n    console.error(colors.red(str));\n}\n\nfunction debug() {\n    Function.apply.call(console.log, console, arguments);\n}\n\nmodule.exports = {\n    error: error,\n    debug: debug\n};\n"}